<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Todo List</title>
    <!-- Bootstrap CSS -->
    <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
    <!-- Font Awesome Icons -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css" rel="stylesheet">
    <!-- Google Fonts - Roboto -->
    <link href="https://fonts.googleapis.com/css2?family=Roboto&display=swap" rel="stylesheet">
    <!-- Custom CSS -->
    <style>
        body {
            background-color: #454d55;
            color: #f1f1f1;
            display: flex;
            flex-direction: column;
            min-height: 100vh; /* Ensure full-height layout */
            transition: background-color 0.3s ease;
        }

        .container {
            flex: 1; /* Take remaining vertical space */
            position: relative; /* Needed for footer positioning */
        }

        .task-list-container {
            max-height: 400px; /* Adjust max-height as needed */
            overflow-y: auto; /* Enable vertical scroll */
            box-shadow: 0 2px 4px rgba(0,0,0,0.1); /* Add shadow */
        }

        footer {
            background-color: #f1f1f1;
            padding: 20px 0;
            text-align: center;
            border-top: 1px solid #ccc;
            position: absolute;
            bottom: 0;
            width: 100%;
            background-color: #343a40;
            color: #fff;
        }

        .footer-container p {
            margin: 0;
        }

        .logout-button {
            position: absolute;
            top: 10px;
            right: 10px;
        }

        .list-group-item {
            background-color: #343a40;
            color: #f1f1f1;
        }

        #taskHelp {
            color: #fff;
        }

        .text-white {
            color: #fff;
        }
        .info-btn{
            position: absolute;
            top: 163px;
            right: 10px;
        }
    </style>
</head>
<body>
    
    <div class="container mt-5">
        <h2 class="mb-3">Welcome, <%= name %></h2>
        <!-- Logout Button -->
        <form action="/logout" method="get" class="logout-button">
            <button class="btn btn-danger">Logout</button>
        </form>
    
        <form action="/addtask/<%= id %>" method="post" class="mb-4">
            <div class="form-group">
                <label for="task">Add a Task:</label>
                <input type="text" class="form-control" id="task" name="task" placeholder="Enter your task here" required>
                <small id="taskHelp" class="form-text text-white">Character count: <span id="charCount">0</span>/256</small>
            </div>
            <button type="submit" class="btn btn-primary"><i class="fas fa-plus"></i> Add Task</button>
        </form>
        <form action="/user/<%= id %>/complete" method="get">
            <button class="btn btn-outline-info info-btn">Completed task</button>
        </form>
        <% if (s0>0) { %>
            <h3>You have to do <b style="font-size: larger;"><%= s0 %></b> tasks today:</h3> 
        <% } %>
        
        <div class="task-list-container">
            <% if (data.length !== 0) { %>
                <ul class="list-group mb-4" id="task-list">
                    <% data.forEach(item => { %>
                        
                        <li class="list-group-item d-flex justify-content-between align-items-center" data-id="<%= item.taskid %>" data-timestamp="<%= item.time %>"> 
                            <form id="editForm" action="/task/status1/<%= id %>/<%= item.taskid %>?_method=PATCH" method="post">
                                <button class="btn btn-outline-info btn-sm check-btn mr-2" onclick="confirmUpdate()">
                                <i class="fas fa-check"></i> <!-- Use the check icon from Font Awesome -->
                                </button>
                            </form>
                            &nbsp;
                            <form action="/user/task/<%= id %>/<%= item.taskid %>?_method=PATCH" method="post" class="d-flex align-items-center w-100">
                                <span class="task-content flex-grow-1">
                                    <% if (item.task.length > 110) { %>
                                        <%= item.task.slice(0, 110) %><br>
                                        <%= item.task.slice(110, 220) %><br>
                                        <%= item.task.slice(220) %>
                                    <% } else { %>
                                        <%= item.task %>
                                    <% } %>
                                </span>
                                <small class="time-ago"></small>&nbsp;
                                <input type="text" name="task" value="<%= item.task %>" class="form-control task-input d-none mr-2"/>
                                <button type="button" class="btn btn-outline-info btn-sm edit-btn mr-2"><i class="fas fa-edit"></i></button>
                                <button type="submit" class="btn btn-outline-info btn-sm save-btn d-none"><i class="fas fa-save"></i></button>&nbsp;
                                <button type="button" class="btn btn-outline-secondary btn-sm cancel-btn d-none"><i class="fas fa-times"></i></button>
                            </form>                                               
                            <form action="/user/task/<%= id %>/<%= item.taskid %>?_method=DELETE" method="post">
                                <button type="submit" class="btn btn-outline-danger btn-sm delete-btn"><i class="fas fa-trash"></i></button>
                            </form>
                        </li>
                    <% }); %>
                </ul>
            <% } else if (s0==0) { %>
                <h2>Nice !! you are done with all your works.   </h2>
                <p>No tasks found.</p>
            <% } %>
        </div>
    </div>
    <!-- Footer -->
    <footer>
        <div class="footer-container">
            <p>&copy; <%= new Date().getFullYear() %> All rights reserved <br>
                Made with &hearts; by Himanshu Kumar Jha.</p>
        </div>
    </footer>

    <!-- JavaScript -->
    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.3/dist/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
    <script>
        function confirmUpdate() {
            if (confirm("Are you sure you want to update?")) {
                document.getElementById("editForm").submit();
            } else {
                // Optionally, you can add code here if the user cancels the action.
            }
        }
        function timeAgo(timestamp) {
            const now = new Date();
            const time = new Date(timestamp);
            const diff = now - time;

            const msPerMinute = 60 * 1000;
            const msPerHour = msPerMinute * 60;
            const msPerDay = msPerHour * 24;
            const msPerMonth = msPerDay * 30;
            const msPerYear = msPerDay * 365;

            if (diff < msPerMinute) {
                return Math.round(diff / 1000) + ' seconds ago';
            } else if (diff < msPerHour) {
                return Math.round(diff / msPerMinute) + ' min ago';
            } else if (diff < msPerDay) {
                return Math.round(diff / msPerHour) + ' hrs ago';
            } else if (diff < msPerMonth) {
                return Math.round(diff / msPerDay) + ' days ago';
            } else if (diff < msPerYear) {
                return Math.round(diff / msPerMonth) + ' months ago';
            } else {
                return Math.round(diff / msPerYear) + ' years ago';
            }
        }

        document.addEventListener("DOMContentLoaded", () => {
            const taskListItems = document.querySelectorAll('.list-group-item');
            
            taskListItems.forEach(item => {
                const timestamp = item.getAttribute('data-timestamp');
                const timeAgoElement = item.querySelector('.time-ago');
                
                if (timestamp) {
                    timeAgoElement.textContent = timeAgo(timestamp);
                } else {
                    timeAgoElement.textContent = 'Unknown'; // or any default message you prefer
                }
            });
        });

        let activeEditBtn = null;

        document.querySelectorAll(".edit-btn").forEach(button => {
            button.addEventListener("click", () => {
                const listItem = button.closest("li");
                const taskContent = listItem.querySelector(".task-content");
                const taskInput = listItem.querySelector(".task-input");
                const saveBtn = listItem.querySelector(".save-btn");
                const cancelBtn = listItem.querySelector(".cancel-btn");
                const deleteBtn = listItem.querySelector(".delete-btn");

                // Deactivate previous active edit button
                if (activeEditBtn && activeEditBtn !== button) {
                    const prevListItem = activeEditBtn.closest("li");
                    const prevTaskContent = prevListItem.querySelector(".task-content");
                    const prevTaskInput = prevListItem.querySelector(".task-input");
                    const prevSaveBtn = prevListItem.querySelector(".save-btn");
                    const prevCancelBtn = prevListItem.querySelector(".cancel-btn");
                    const prevDeleteBtn = prevListItem.querySelector(".delete-btn");

                    prevTaskContent.classList.remove("d-none");
                    prevTaskInput.classList.add("d-none");
                    activeEditBtn.classList.remove("d-none");
                    prevSaveBtn.classList.add("d-none");
                    prevCancelBtn.classList.add("d-none");
                    prevDeleteBtn.classList.remove("d-none");
                }

                activeEditBtn = button;

                // Hide delete button
                deleteBtn.classList.add("d-none");

                // Hide task content, show input and buttons
                taskContent.classList.add("d-none");
                button.classList.add("d-none");
                taskInput.classList.remove("d-none");
                saveBtn.classList.remove("d-none");
                cancelBtn.classList.remove("d-none");

                taskInput.focus();
            });
        });

        document.querySelectorAll(".cancel-btn").forEach(cancelBtn => {
            cancelBtn.addEventListener("click", () => {
                const listItem = cancelBtn.closest("li");
                const taskContent = listItem.querySelector(".task-content");
                const taskInput = listItem.querySelector(".task-input");
                const editBtn = listItem.querySelector(".edit-btn");
                const saveBtn = listItem.querySelector(".save-btn");
                const deleteBtn = listItem.querySelector(".delete-btn");

                // Show delete button
                deleteBtn.classList.remove("d-none");

                // Show task content, hide input and buttons
                taskContent.classList.remove("d-none");
                taskInput.classList.add("d-none");
                editBtn.classList.remove("d-none");
                saveBtn.classList.add("d-none");
                cancelBtn.classList.add("d-none");

                // Clear and reset input value if needed
                taskInput.value = taskContent.textContent.trim();

                // Remove character count if it exists
                const editCharCount = listItem.querySelector("#editCharCount");
                if (editCharCount) {
                    editCharCount.remove();
                }

                activeEditBtn = null;
            });
        });

        // Additional JavaScript for character count and validation
        const taskInput = document.getElementById('task');
        const charCount = document.getElementById('charCount');

        taskInput.addEventListener('input', function() {
            const count = this.value.length;
            charCount.textContent = count;

            // You can adjust the maximum length as needed
            const maxLength = 256;
            if (count > maxLength) {
                taskInput.setCustomValidity('Task length exceeds 256 characters.');
            } else {
                taskInput.setCustomValidity('');
            }
        });

        // JavaScript for editing task content
        document.querySelectorAll('.edit-btn').forEach(editBtn => {
            editBtn.addEventListener('click', () => {
                const listItem = editBtn.closest('li');
                const taskContent = listItem.querySelector('.task-content');
                const taskInput = listItem.querySelector('.task-input');
                const saveBtn = listItem.querySelector('.save-btn');

                taskContent.classList.add('d-none');
                taskInput.classList.remove('d-none');
                editBtn.classList.add('d-none');
                saveBtn.classList.remove('d-none');
                // Create and insert character count only after clicking edit button
                const editCharCount = document.createElement('small');
                editCharCount.id = 'editCharCount';
                editCharCount.classList.add('form-text', 'text-white');
                editCharCount.innerHTML = `<span>${taskInput.value.length}</span>/256&nbsp;&nbsp;`;

                // Remove existing character count if any
                const existingCharCount = listItem.querySelector('#editCharCount');
                if (existingCharCount) {
                    existingCharCount.parentNode.removeChild(existingCharCount);
                }

                taskInput.parentNode.insertBefore(editCharCount, taskInput.nextSibling);

                // Update character count dynamically
                taskInput.addEventListener('input', () => {
                    const count = taskInput.value.length;
                    editCharCount.querySelector('span').textContent = count;

                    // You can adjust the maximum length as needed
                    const maxLength = 256;
                    if (count > maxLength) {
                        taskInput.setCustomValidity('Task length exceeds 256 characters.');
                    } else {
                        taskInput.setCustomValidity('');
                    }
                });
            });
        });

        // Function to update time ago for each task
        function updateTimeAgo() {
            const taskListItems = document.querySelectorAll('.list-group-item');
            taskListItems.forEach(item => {
                const timestamp = item.getAttribute('data-timestamp');
                const timeAgoElement = item.querySelector('.time-ago');
                if (timestamp) {
                    timeAgoElement.textContent = timeAgo(timestamp);
                } else {
                    timeAgoElement.textContent = 'Unknown'; // or any default message you prefer
                }
            });
        }

        // Update time ago initially and then every minute (60000 ms)
        updateTimeAgo();
        setInterval(updateTimeAgo, 60000); // Update every minute
    </script>
</body>
</html>
